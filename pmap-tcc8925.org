* pmap in tcc-8925

** In bootloader

File: =bootloader/target/tcc892x_evm/atags.c=

Below define is used in function =target_atag_mem=

#+BEGIN_SRC C
#define ATAG_TCC_PMAP	0x5443436d	/* TCCm */
#+END_SRC

Below define is used in function =target_atag_mem=

#+BEGIN_SRC C
static pmap_t pmap_table[] = {
	{ "pmem", PMEM_SURF_BASE, PMEM_SURF_SIZE },
	{ "viocmg", PMEM_VIOCMG_BASE, PMEM_VIOCMG_SIZE },
	{ "secured_inbuff", SECURED_IN_MEM_BASE, SECURED_IN_MEM_SIZE},
	{ "video_sbackup", VIDEO_SBACKUP_MEM_BASE, VIDEO_SBACKUP_MEM_SIZE},
	{ "overlay", OVERLAY_0_PHY_ADDR, OVERLAY_0_MEM_SIZE },
	{ "overlay1", OVERLAY_1_PHY_ADDR, OVERLAY_1_MEM_SIZE },
	{ "overlay_rot", OVERLAY_ROTATION_PHY_ADDR, OVERLAY_ROTATION_MEM_SIZE },
	{ "video", VIDEO_MEM_BASE, VIDEO_MEM_SIZE },
	{ "video_thumb", VIDEO_THUMB_MEM_BASE, VIDEO_THUMB_MEM_SIZE},
	{ "ump_reserved", UMP_RESERVED_BASE, UMP_RESERVED_SIZE },
	{ "mali_reserved", MALI_RESERVED_BASE, MALI_RESERVED_SIZE },
	{ "v4l2_video0", V4L2_VIDEO0_BASE, V4L2_VIDEO0_SIZE },
	{ "v4l2_video1", V4L2_VIDEO1_BASE, V4L2_VIDEO1_SIZE },
	{ "v4l2_video2", V4L2_VIDEO2_BASE, V4L2_VIDEO2_SIZE },
	{ "v4l2_video3", V4L2_VIDEO3_BASE, V4L2_VIDEO3_SIZE },
	{ "v4l2_video4", V4L2_VIDEO4_BASE, V4L2_VIDEO4_SIZE },
	{ "v4l2_vout", V4L2_VOUT_BASE, V4L2_VOUT_SIZE },
	{ "v4l2_subtitle", V4L2_SUBTITLE_BASE, V4L2_SUBTITLE_SIZE },
	{ "fb_wmixer", FB_WMIXER_MEM_BASE, FB_WMIXER_MEM_SIZE},
	{ "ram_console", RAM_CONSOLE_BASE, RAM_CONSOLE_SIZE },
	{ "fb_wmixer_ext", FB_WMIXER_EXT_MEM_BASE, FB_WMIXER_MEM_SIZE},
	{ "viqe", PMEM_VIQE_BASE, PMEM_VIQE_SIZE },
	{ "ext_camera", EXT_CAM_BASE, EXT_CAM_SIZE },
	{ "fb_video", FB_MEM_BASE, FB_MEM_SIZE },
	{ "fb_scale", FB_SCALE_MEM_BASE, FB_SCALE_MEM_TOTAL_SIZE },
	{ "fb_scale0", FB_SCALE_ADDR0, FB_SCALE_SIZE },
	{ "fb_scale1", FB_SCALE_ADDR1, FB_SCALE_SIZE },
	{ "fb_g2d0", FB_G2D_ADDR0, FB_G2D_SIZE },
	{ "fb_g2d1", FB_G2D_ADDR1, FB_G2D_SIZE },
	{ "video_dual", VIDEO_DUAL_DISPLAY_BASE, VIDEO_DUAL_DISPLAY_SIZE },
	{ "jpeg_header", PA_JPEG_HEADER_BASE_ADDR, TCC_JPEG_HEADER_SIZE },
	{ "jpeg_raw", PA_JPEG_RAW_BASE_ADDR, JPEG_RAW_MEM_SIZE },
	{ "jpeg_stream", PA_JPEG_STREAM_BASE_ADDR, JPEG_STREAM_MEM_SIZE },
	{ "jpg_enc_dxb", JPEG_ENC_CAPTURE_BASE, JPEG_ENC_CAPTURE_SIZE},
	{ "jpg_raw_dxb", JPEG_RAW_CAPTURE_BASE, JPEG_RAW_CAPTURE_SIZE},
	{ "video_ext", VIDEO_MEM_EXT_BASE, VIDEO_MEM_EXT_SIZE },
	{ "parking_gui", PARKING_GUIDE_BASE, PARKING_GUIDE_SIZE },
	{ "early_cam", EARLY_CAM_VIEW_BASE, EARLY_CAM_VIEW_SIZE },
	{ "total", PMEM_SURF_BASE, TOTAL_FIXED_MEM_SIZE }
};
#+END_SRC


#+BEGIN_SRC C
unsigned* target_atag_mem(unsigned* ptr)
{
	unsigned i;

	/* ATAG_MEM */
	*ptr++ = 4;
	*ptr++ = ATAG_MEM;

	//*ptr++ = KERNEL_MEM_SIZE;
	if((unsigned int)(KERNEL_MEM_SIZE) < (unsigned int)(2048*SZ_1M))
		*ptr++ = KERNEL_MEM_SIZE;
	else
		*ptr++ = ((2048*SZ_1M)-4);

	*ptr++ = BASE_ADDR;

	/* ATAG_TCC_PMAP */
	*ptr++ = 2 + (sizeof(pmap_table) / sizeof(unsigned));
	*ptr++ = ATAG_TCC_PMAP;
	for (i = 0; i < ARRAY_SIZE(pmap_table); i++) {
		memcpy(ptr, &pmap_table[i], sizeof(pmap_t));
		ptr += sizeof(pmap_t) / sizeof(unsigned);
	}

	return ptr;
}
#+END_SRC


#+BEGIN_SRC plantuml :file img/bootloader_pmap_construct.png
@startuml
actor "bootloader/appaboot/aboot.c" as B
Participant "bootloader/target/tcc892x_evm" as C
title bootloader construct pmap_table and pass to kernel
B->B : boot_linux_from_serial_flash or cmd_boot
activate B
note over B
passed down the *tags, 
to generate_atags, and target_atag_mem
end note
B->B : boot_linux(*kernel, *tags, *cmdline, machtype, *ramdisk, ramdisk_size)
B -> B : generate_atags(tags, final_cmdline, ramdisk, ramdisk_size)
B -> C : target_atag_mem(tags)

activate C
note over C
in side target_atag_mem, 
it uses ATAG_TCC_PMAP	0x5443436d
and Function pmap_table, to construct 
the pmap

end note
deactivate C
deactivate B
@enduml
#+END_SRC


[[file:img/bootloader_pmap_construct.png]]

** inside kernel

File: =kernel/arch/arm/plat-tcc/pamp.c=

#+BEGIN_SRC C
#define ATAG_TCC_PMAP	0x5443436d	/* TCCm */
#+END_SRC




#+BEGIN_SRC C

static int __init parse_tag_tcc_pmap(const struct tag *tag)
{
	pmap_t *pmap = pmap_table;
	pmap_t *entry = (void *) &tag->u;
	unsigned count, n;

	count = (tag->hdr.size - 2) / ((sizeof(pmap_t) / sizeof(__u32)));
	if (count > MAX_PMAPS)
		count = MAX_PMAPS;

	for (n = 0; n < count; n++) {
		memcpy(pmap->name, entry->name, TCC_PMAP_NAME_LEN - 1);
		pmap->name[TCC_PMAP_NAME_LEN - 1] = 0;
		pmap->base = entry->base;
		pmap->size = entry->size;
		entry++;
		pmap++;
	}
	num_pmaps = count;
	return 0;
}
__tagtable(ATAG_TCC_PMAP, parse_tag_tcc_pmap);
#+END_SRC

after =parse_tag_tcc_pmap= Function, =pmat_table= is filled up

*=pmat_table=* is passed to kernel from bootloader by =ATAG_TCC_PMAP=


** access the pmap from =/proc/pmap=
#+BEGIN_SRC shell
cat /proc/pmap
#+END_SRC

in the kernel code, the /proc/pmap creation
#+BEGIN_SRC C
static int __init tcc_pmap_init(void)
{
	pmap_proc_entry = create_proc_entry("pmap", 0444, NULL);
	if (pmap_proc_entry) {
		pmap_proc_entry->read_proc = pmap_read_proc;
	}
	return 0;
}
#+END_SRC

the =/proc/pmap= is created by 
#+BEGIN_SRC C
static struct proc_dir_entry *pmap_proc_entry;
pmap_proc_entry = create_proc_entry("pmap", 0444, NULL);
#+END_SRC


For reading the =/proc/pmap=
#+BEGIN_SRC C
static int pmap_read_proc(char *page, char **start, off_t off,
			      int count, int *eof, void *data)
{
	int i, len;

	len = sprintf(page, "%-10s %-10s %s\n", "base_addr", "size", "name");
	for (i = 0; i < num_pmaps; i++) {
		len += pmap_proc_info(page + len, pmap_table[i].name,
				      pmap_table[i].base, pmap_table[i].size);
	}
	return len;
}
#+END_SRC

=pmap_proc_info= Function is as:
#+BEGIN_SRC C
static inline int pmap_proc_info(char *buf, const char *name,
			    unsigned int base_addr, unsigned int size)
{
	return sprintf(buf, "0x%8.8x 0x%8.8x %s\n", base_addr, size, name);
}
#+END_SRC

* how the pmap memory is allocated

inside the =pmap-tcc897x.c=

#+BEGIN_SRC C
  static pmap_t pmap_table[MAX_PMAPS];

  int pmap_erarly_init()
  {
	  pmap_t *pmap = pmap_table;
	  pmap_t* entry = tcc_get_pmap_table(); /* get the tcc897x_pmap_table defined inside the pmap.c */
	  /* for loops to fill up pmap array with entry information */
	  count = tcc_get_pmap_size();
	  for (n = 0; n < count; n++)
	  {
		  memcpy(pmap->name, entry->name, TCC_PMAP_NAME_LEN-1);
		  pmap->name[TCC_PMAP_NAME_LEN-1] = 0;
		  pmap->base = entry->base;
		  pmap->size = entry-size;
		  entry++;
		  pmap++;
	  }
  }
#+END_SRC

inside the kernel code =pmap.c=
#+BEGIN_SRC C
  static pmap_t tcc897x_pmap_table[] =
  {
	  {"pmem", PMAP_BASE, 0},
	  {"fb_video", FB_VIDEO_BASE, SECURED_INBUFF_SIZE},
	  /* ... */
	  /* ... */
	  {"total", PMAP_BASE, PMAP_TOTAL},
  };
#+END_SRC

#+BEGIN_SRC plantuml :file img/pmap_memory_allocation.png :results output1
    participant "io.c" as A
    participant "pmap-tcc897x.c" as B
    participant "pmap.c" as C
    participant "memblock.c" as D

     [->A: tcc_reserve_sdram
    A->B: pmap_early_init
    B->C: tcc_get_pmap_table
    B->C: tcc_get_pmap_size
    A->B: pmap_get_info("total", &pmap);
    note right of A
	  from the above tcc897x_pmap_table, we can see the "total" is
  {"total", PMAP_BASE, PMAP_TOTAL}
  end note
A->A: start = pmap.base;\n size = pmap.size;
note right of A
so for "total", start is PMPA_BASE, size is PMAP_TOTAL
end note

A->D: <back:pink>memblock_remove(base, size)</back>
note right of A #pink
<back:cadetblue>memblock_remove</back> is used for reserving memory
end note
#+END_SRC

#+RESULTS:
[[file:img/pmap_memory_allocation.png]]

[[file:img/pmap_memory_allocation.png]]


** memblock_reserve and memblock_remove
memblock_reserve() adds a given memory to the "memblock.reserved" list, it
ends up to mark the given range of pages as "reserved". It means the pages
are reserved and will not be allocated to other users. The kernel still can
see the pages, create linear mappings on them, even access them by linear
mappings.

memblock_remove() removes a given memory from the "memblock.memory" list,
it ends to removed from kernel's memory management system. The memory will
not have page structure, no linear mapping on them. It prevents the memory
from CPU accessing by the linear address. To access the memory (by CPU),
you must use ioremap() to create a mapping to them.


** ioremap

example in tcc_vioc_interface.c to set the memory to 0 and then =iounmap=

#+BEGIN_SRC C
  pmap_get_info("viqe", &pmap);
  unsigned int *remap_addr = (unsigned int *)ioremap_nocache(pmap.base, pmap.size);
  memset((void*)remap_addr, 0x00, pmap.size);
  if (remap_addr != NULL)
    iounmap((void*)remap_addr);
#+END_SRC

** example from internet that after ioremap, we can access memory by using readl/writel

- Get a virtual address mapping setup to the registers in question using ioremap
- Use =readl/writel= to manipulate the physical memory.
Beware that ARM processors will fault on unaligned accesses. Linux handles this gracefully, but with a performance penalty.

Tiny example:
#+BEGIN_SRC C
void __iomem *regs = ioremap(0xdead0000, 4);

pr_info("0xdead0000: %#x\n", readl(regs));

iounmap(regs);
#+END_SRC
