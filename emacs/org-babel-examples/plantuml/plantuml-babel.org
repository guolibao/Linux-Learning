#+TITLE:     plantuml-babel.org
#+AUTHOR:    Derek Feichtinger
#+EMAIL:     dfeich@dflt1w
#+DATE:      2012-11-18 Sun
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+LATEX_HEADER_EXTRA: \usepackage{svg}

# By default I do not want that source code blocks are evaluated on export. Usually
# I want to evaluate them interactively and retain the original results.
#+PROPERTY: header-args :eval never-export

* Links
  - http://plantuml.sourceforge.net/

*  Information on the local installation  

  #+BEGIN_SRC sh :results output :var jpath=(expand-file-name org-plantuml-jar-path)
  echo "Emacs variable org-plantuml-jar-path:$jpath\n\n"
  if test ! -r "$jpath"; then
     echo "ERROR: Cannot read the file"
     return
  fi
  java -jar "$jpath" -version
  echo 
  java -jar "$jpath" -checkversion
  #+END_SRC

  #+RESULTS:
  #+begin_example
  Emacs variable org-plantuml-jar-path:/home/dfeich/.emacs.d/javalib/plantuml.jar


  PlantUML version 8015 (Sun Dec 14 16:41:52 CET 2014)
  (GPL source distribution)
  OpenJDK Runtime Environment
  OpenJDK 64-Bit Server VM
  1.7.0_65-b32
  Linux

  The environment variable GRAPHVIZ_DOT has not been set
  Dot executable is /usr/bin/dot
  Dot version: dot - graphviz version 2.36.0 (20140111.2315)
  Installation seems OK. File generation OK

  PlantUML version 8015 (Sun Dec 14 16:41:52 CET 2014)

  Last available version for download : 8015

  Your version is up to date.
#+end_example


**  Help text

  #+BEGIN_SRC sh :results output :var jpath=(expand-file-name org-plantuml-jar-path)
  java -jar "$jpath" -help
  #+END_SRC

  #+RESULTS:
  #+begin_example
  Usage: java -jar plantuml.jar [options] -gui
	  (to execute the GUI)
      or java -jar plantuml.jar [options] [file/dir] [file/dir] [file/dir]
	  (to process files or directories)

  You can use the following wildcards in files/dirs:
	  *	means any characters but '/'
	  ?	one and only one character but '/'
	  **	means any characters (used to recurse through directories)

  where options include:
      -gui		To run the graphical user interface
      -tpng		To generate images using PNG format (default)
      -tsvg		To generate images using SVG format
      -teps		To generate images using EPS format
      -tpdf		To generate images using PDF format
      -tvdx		To generate images using VDX format
      -txmi		To generate XMI file for class diagram
      -thtml		To generate HTML files for class diagram
      -ttxt		To generate images with ASCII art
      -tutxt		To generate images with ASCII art using Unicode characters
      -o[utput] "dir"	To generate images in the specified directory
      -DVAR1=value	To set a preprocessing variable as if '!define VAR1 value' were used
      -Sparam1=value	To set a skin parameter as if 'skinparam param1 value' were used
      -r[ecurse]		recurse through directories
      -config "file"	To read the provided config file before each diagram
      -charset xxx	To use a specific charset (default is UTF-8)
      -e[x]clude pattern	To exclude files that match the provided pattern
      -metadata		To retrieve PlantUML sources from PNG images
      -version		To display information about PlantUML and Java versions
      -checkversion	To check if a newer version is available for download
      -v[erbose]		To have log information
      -quiet		To NOT print error message into the console
      -keepfiles		To NOT delete temporary files after process
      -h[elp]		To display this help message
      -testdot		To test the installation of graphviz
      -graphvizdot "exe"	To specify dot executable
      -p[ipe]		To use stdin for PlantUML source and stdout for PNG/SVG/EPS generation
      -encodesprite 4|8|16[z] "file"	To encode a sprite at gray level (z for compression) from an image
      -computeurl|-encodeurl	To compute the encoded URL of a PlantUML source file
      -decodeurl		To retrieve the PlantUML source from an encoded URL
      -syntax		To report any syntax error from standard input without generating images
      -language		To print the list of PlantUML keywords
      -nosuggestengine	To disable the suggest engine when errors in diagrams
      -checkonly		To check the syntax of files without generating images
      -failfast		To stop processing as soon as a syntax error in diagram occurs
      -failfast2		To do a first syntax check before processing files, to fail even faster
      -pattern		To print the list of Regular Expression used by PlantUML
      -duration		To print the duration of complete diagrams processing
      -nbthread N		To use (N) threads for processing
      -nbthread auto	To use 4 threads for processing
      -author[s]		To print information about PlantUML authors
      -overwrite		To allow to overwrite read only files
      -printfonts		To print fonts available on your system

  If needed, you can setup the environment variable GRAPHVIZ_DOT.
#+end_example


* Tests

** simple test
#+BEGIN_SRC plantuml :file fig/sequence1.png :exports both
  ' this is a comment
  Alice -> Bob: Authentication Request
  Bob --> Alice: Authentication Response
  John --> Alice: another Authentication Request
  Alice --> John: another Authentication Response
#+END_SRC

#+RESULTS:
[[file:fig/sequence1.png]]

** simple test with SVG graphic

   The /svg/ package uses inkscape to separate the text and graphical
   elements of the SVG into a Tex file (*.pdf_tex) and a PDF file
   containig the graph elements.  E.g. svg-sequence1.svg into
   svg-sequence1.pdf_tex and svg-sequence1.pdf.

   Currently, SVG pictures can only be rendered correctly, *if the picture
   is in the same directory* as the tex (and therefore also org q) source file.

   # #+LATEX: \setsvg{svgpath = fig/}
   # #+LATEX: \setsvg{path = fig/}   

   #+BEGIN_SRC plantuml :file svg-sequence1.svg :exports both
     ' this is a comment
     Alice -> Bob: Authentication Request
     Bob --> Alice: Authentication Response
     John --> Alice: another Authentication Request
     Alice --> John: another Authentication Response
   #+END_SRC

   #+RESULTS:
   [[file:svg-sequence1.svg]]


** sequence diagrams
#+BEGIN_SRC plantuml :file fig/sequence2.png
skin BlueModern
title Example Sequence Diagram
activate Client
Client -> Server: Session Initiation
note right: Client requests new session
activate Server
Client <-- Server: Authorization Request
note left: Server requires authentication
Client -> Server: Authorization Response
note right: Client provides authentication details
Server --> Client: Session Token
note left: Session established
deactivate Server
Client -> Client: Saves token
deactivate Client
#+END_SRC

#+RESULTS:
[[file:fig/sequence2.png]]



#+BEGIN_SRC plantuml :file fig/sequence3.png
skin BlueModern

actor User
participant "First Class" as A
participant "Second Class" as B
participant "Last Class" as C


User -> A: DoWork
activate A

A -> B: << createRequest >>
activate B

B -> C: DoWork
activate C
C --> B: WorkDone
destroy C

B --> A: Request <u>Created</u>
deactivate B

A --> User: Done
deactivate A
#+END_SRC

#+RESULTS:
[[file:fig/sequence3.png]]




#+BEGIN_SRC plantuml :file fig/sequence4.png
left to right direction
actor remoteUser
actor service
rectangle Gateway {
  remoteUser -- (connect camera)
  (connect camera) -- service
  remoteUser -- (console)
  (console) -- service
}
#+END_SRC

#+RESULTS:
[[file:fig/sequence4.png]]


** old style activity diagrams
#+BEGIN_SRC plantuml :file fig/activity1.png
title Example Activity Diagram
note right: Example Function
(*)--> "Step 1"
--> "Step 2"
-> "Step 3"
--> "Step 4"
--> === STARTLOOP ===
note top: For each element in the array
if "Are we done?" then
  -> [no] "Do this"
  -> "Do that"
  note bottom: Important note\ngoes here
  -up-> "Increment counters"
  --> === STARTLOOP ===
else
  --> [yes] === ENDLOOP ===
endif
--> "Last Step"
--> (*)
#+END_SRC

#+RESULTS:
[[file:fig/activity1.png]]


#+BEGIN_SRC plantuml :file fig/activity2.png
title Servlet Container

(*) --> "ClickServlet.handleRequest()"
--> "new Page"

if "Page.onSecurityCheck" then
  ->[true] "Page.onInit()"
  
  if "isForward?" then
   ->[no] "Process controls"
   
   if "continue processing?" then
     -->[yes] ===RENDERING===
   else
     -->[no] ===REDIRECT_CHECK===
   endif
   
  else
   -->[yes] ===RENDERING===
  endif
  
  if "is Post?" then
    -->[yes] "Page.onPost()"
    --> "Page.onRender()" as render
    --> ===REDIRECT_CHECK===
  else
    -->[no] "Page.onGet()"
    --> render
  endif
  
else
  -->[false] ===REDIRECT_CHECK===
endif

if "Do redirect?" then
 ->[yes] "redirect request"
 --> ==BEFORE_DESTROY===
else
 if "Do Forward?" then
  -left->[yes] "Forward request"
  --> ==BEFORE_DESTROY===
 else
  -right->[no] "Render page template"
  --> ==BEFORE_DESTROY===
 endif
endif

--> "Page.onDestroy()"
-->(*)
#+END_SRC

#+RESULTS:
[[file:fig/activity2.png]]



** new style activity diagrams
   - http://plantuml.sourceforge.net/activity2.html

*** swimlanes

   Swimlanes actually are activity diagrams using the new syntax.
   
   #+BEGIN_SRC plantuml :file fig/swimlane1.png
@startuml
|Swimlane1|
start
:foo1;
|#AntiqueWhite|Swimlane2|
:foo2;
:foo3;
|Swimlane1|
:foo4;
|Swimlane2|
:foo5;
stop
@enduml
   #+END_SRC

   #+RESULTS:
   [[file:fig/swimlane1.png]]

** Class diagram
   http://plantuml.sourceforge.net/classes.html
   
   #+BEGIN_SRC plantuml :file fig/class1.png
     class Proposal {
     also called a "study"
     ..
     ProposalID
     Proposer
     PrincipalInvestigator
     }

     class Visit << (V,#Ff8c00) >> {
     has a 1:1 mapping to a
     single user. Also used to
     reserve badges.
     ..
     Username
     starttime
     endtime
     proposalID
     beamline
     }

     note left: why is Visit linked\nto a single beamline?

     class Shift {
     ProposalID
     starttime
     endtime
     contactPerson
     }

     Proposal *-- Shift
     Proposal *-- Visit
   #+END_SRC

   #+RESULTS:
   [[file:fig/class1.png]]

* TODO Open problems
  - example for scaling =scale 800*600=
* COMMENT babel settings

  Note: Since minted (which I use for source code coloring) does not contain a lexer
  for dot, I disable it by setting =org-latex-listings= to =nil= in this buffer.

Local Variables:
org-babel-after-execute-hook: (lambda () (org-display-inline-images nil t) (org-redisplay-inline-images))
org-latex-listings: nil
org-confirm-babel-evaluate: nil
End:

